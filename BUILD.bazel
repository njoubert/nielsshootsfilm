package(default_visibility = ["//visibility:public"])

# Project documentation
filegroup(
    name = "project_docs",
    srcs = glob(["docs/**/*.md"]),
    visibility = ["//visibility:public"],
)

# Configuration files
filegroup(
    name = "config_files",
    srcs = [
        ".editorconfig",
        ".gitignore",
        ".pre-commit-config.yaml",
        ".prettierrc",
        ".secrets.baseline",
    ],
)

# ==============================================================================
# Development Convenience Targets
# ==============================================================================

# Run both frontend and backend dev servers
# Usage: bazel run //:dev
# Note: This will run servers sequentially. For parallel, use separate terminals.
sh_binary(
    name = "dev",
    srcs = ["dev.sh"],
    data = [
        "//backend:backend_srcs",
        "//data:all",
        "//frontend:frontend_srcs",
        "//static:all",
    ],
)

# Run frontend dev server only
# Usage: bazel run //:dev-frontend
alias(
    name = "dev-frontend",
    actual = "//frontend:dev",
)

# Run backend dev server only
# Usage: bazel run //:dev-backend
alias(
    name = "dev-backend",
    actual = "//backend:dev",
)

# ==============================================================================
# Testing Targets
# ==============================================================================

# Run all tests (frontend + backend)
# Usage: bazel test //:test-all
test_suite(
    name = "test-all",
    tags = ["unit"],
    tests = [
        "//backend:test",
        "//frontend:test",
    ],
)

# Run only unit tests (fast)
# Usage: bazel test //:test-unit
test_suite(
    name = "test-unit",
    tags = ["unit"],
    tests = [
        "//backend:test",
        "//frontend:test",
    ],
)

# Run all linters
# Usage: bazel test //:lint
test_suite(
    name = "lint",
    tags = ["lint"],
    tests = [
        "//backend:lint",
        "//frontend:lint",
    ],
)

# Run type-checking
# Usage: bazel test //:typecheck
alias(
    name = "typecheck",
    actual = "//frontend:typecheck",
)

# ==============================================================================
# Formatting Targets
# ==============================================================================

# Format all code (frontend + backend)
# Usage: bazel run //:format
sh_binary(
    name = "format",
    srcs = ["format.sh"],
    data = [
        "//backend:backend_srcs",
        "//frontend:frontend_srcs",
    ],
)

# ==============================================================================
# Build Targets
# ==============================================================================

# Build everything for production
# Usage: bazel build //:build-all
filegroup(
    name = "build-all",
    srcs = [
        "//backend:server",
        "//frontend:build",
    ],
)

# Build backend server binary
# Usage: bazel build //:build-backend
alias(
    name = "build-backend",
    actual = "//backend:server",
)

# Build frontend for production
# Usage: bazel run //:build-frontend
alias(
    name = "build-frontend",
    actual = "//frontend:build",
)

# ==============================================================================
# Utility Targets
# ==============================================================================

# Bootstrap the project (initialize data files, set admin password)
# Usage: bazel run //:bootstrap
sh_binary(
    name = "bootstrap",
    srcs = ["scripts/bootstrap.sh"],
    data = [
        "//data:all",
        "//static:all",
    ],
)

# Hash a password for admin authentication
# Usage: bazel run //:hash-password
sh_binary(
    name = "hash-password",
    srcs = ["scripts/hash-password.sh"],
)

# Run API integration tests
# Usage: bazel run //:test-api
sh_binary(
    name = "test-api",
    srcs = ["scripts/test-api.sh"],
    data = [
        "//backend:server",
        "//data:all",
    ],
)

# Download sample images for testing
# Usage: bazel run //:download-sample-images
sh_binary(
    name = "download-sample-images",
    srcs = ["scripts/download-sample-images.sh"],
    data = ["//testdata:all"],
)

# ==============================================================================
# CI/CD Targets
# ==============================================================================

# Run all checks (tests, lints, typecheck) - use in CI
# Usage: bazel test //:ci
test_suite(
    name = "ci",
    tests = [
        ":lint",
        ":test-all",
        ":typecheck",
    ],
)

# Pre-commit checks (faster subset for local development)
# Usage: bazel test //:pre-commit
test_suite(
    name = "pre-commit",
    tests = [
        ":lint",
        ":typecheck",
    ],
)
